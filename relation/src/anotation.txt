관계설정 anotation
1) ManyToOne - 부서와 사원, 팀과 회원, 학과와 학생
             - 정보를 가지고 나올 때 관련있는 테이블 정보를 가지고나옴(left join)
             - FetchType.EAGER 상태

2) OneToMany - 정보를 가지고 나올 때 관련있는 테이블 정보를 안가져옴
             - FetchType.LAZY 상태


3) OneToOne - 정보를 가지고 나올 때 관련있는 테이블 정보를 가지고 나옴(left join)
            -  FetchType.EAGER 상태

4) @ManyToMany - 실제 업무 환경에서는 잘 사용되지 않음
               - @ManyToMany 관게로 변경
               - FetchType.LAZY 상태


양방향 관계는 없음 : 단방향 2개를 연다
데이터베이스 테이블은 외래키 하나로 양쪽이 서로 조인이 가능함 -> 객체 입장에서는 한쪽만 관계 설정을 하면 안됨
단방향 2개를 여는 대신 주 관계가 어디인지 명시해야함 ( @mappedBy )
장점 : 조회 접근 방법이 하나 더 생기는것
       부서에 속한 모든 사원 정보 조회 가능
       부서에 속한 모든 사원의 평균연봉 조회 가능 등

프록시 : 프록시를 통해 연관된 객체를 실제 사용하는 시점에 데이터베이스에서 조회하도록 함(지연로딩)
         자주 함께 사용하는 객체들은 조인을 통해서 함게 조회(즉시 로딩)
FetchType.EAGER : 즉시로딩
FetchType.LAZY : 지연로딩

FetchType.LAZY 일때 관련있는 테이블 정보를 접근하려고 하면
LazyInitializationException 발생
해결 - @Transactional : select 구문 2개로 처리
     - @OneToMany(fetch = FetchType.EAGER) : 관련있는 테이블 정보를 즉시 가지고나옴(left join)
     - @OneToMany(fetch = FetchType.LAZY) : 지연로딩 


영속성 관리 : 양방향일때 사용할 수 있는 개념
- 부모 저장 시 자식 엔티티도 같이 저장
- 영속성 상태에 있어야 삽입 삭제 수정 가능   
- @OneToMany(mappedBy = "parent", cascade = { CascadeType.PERSIST, CascadeType.REMOVE }, orphanRemoval = true)

- cascade = { CascadeType.PERSIST, CascadeType.REMOVE } : 부모 저장, 삭제시 자식도 같이 작업되도록 설정

- 부모 객체에서 자식 객체를 제거(고아객체)하면 자식 객체가 제거: orphanRemoval = true 